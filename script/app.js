// Generated by CoffeeScript 1.7.1
var TextInput, TextOutput;

window.App = {};

App.marked = require("./marked");

App.TextInput = TextInput = (function() {
  function TextInput(options) {
    this.$el = options.$el.eq(0);
    this.el = this.$el.get(0);
    this.output = options.output || {};
    if (options.bindNow) {
      this.bindEvents();
    }
  }

  TextInput.prototype.converter = App.marked;

  TextInput.prototype.focus = function() {
    this.focused = false;
    this.$el.focus();
    return this;
  };

  TextInput.prototype.blur = function() {
    this.focused = true;
    this.$el.blur();
    return this;
  };

  TextInput.prototype.bindEvents = function() {
    this.$el.on("focus", (function(_this) {
      return function() {
        return _this.output.focus(false);
      };
    })(this));
    this.$el.on("blur", (function(_this) {
      return function() {
        return _this.output.blur(false);
      };
    })(this));
    this.$el.on("keyup", (function(_this) {
      return function() {
        return _this.output.updateOutput();
      };
    })(this));
    return this;
  };

  return TextInput;

})();

App.TextOutput = TextOutput = (function() {
  function TextOutput(options) {
    this.$el = options.$el.eq(0);
    this.el = this.$el.get(0);
    this.input = options.input || {};
    this.toggler = this.$el.siblings(".toggler");
    this.displayMode = "html";
    if (options.bindNow) {
      this.bindEvents();
    }
  }

  TextOutput.prototype.converter = App.marked;

  TextOutput.prototype.focus = function(triggerFocus) {
    this.focused = true;
    if (triggerFocus) {
      this.input.focus();
    }
    this.$el.addClass("focused");
    this.placeCursor();
    return this;
  };

  TextOutput.prototype.blur = function(triggerBlur) {
    this.focused = false;
    if (triggerBlur) {
      this.input.blur();
    }
    this.$el.removeClass("focused");
    this.removeCursor();
    return this;
  };

  TextOutput.prototype.toggleOutputType = function() {
    if (this.displayMode === "html") {
      this.displayMode = "md";
      this.toggler.addClass("md");
    } else if (this.displayMode === "md") {
      this.displayMode = "html";
      this.toggler.removeClass("md");
    }
    this.focus(true);
    this.updateOutput();
    return this;
  };

  TextOutput.prototype.updateOutput = function() {
    switch (this.displayMode) {
      case "html":
        this.updateHtmlOutput();
        break;
      case "md":
        this.updateMdOutput();
    }
    return this;
  };

  TextOutput.prototype.updateHtmlOutput = function() {
    var markdown;
    markdown = this.input.el.value;
    this.converter(markdown);
    this.$el.html(this.converter(markdown));
    this.placeCursor();
    return this;
  };

  TextOutput.prototype.updateMdOutput = function() {
    var markdown;
    markdown = this.input.el.value;
    this.$el.html(markdown);
    this.placeCursor();
    return this;
  };

  TextOutput.prototype.removeCursor = function() {
    var cursor;
    cursor = this.$el.find(".has-cursor");
    cursor.replaceWith(cursor.text());
    return this;
  };

  TextOutput.prototype.placeCursor = function() {
    var last;
    if (!this.input.el.value) {
      this.$el.append("<p>");
    }
    this.removeCursor();
    last = this.$el.children().last();
    while (last.children().length) {
      last = last.children().last();
    }
    last.wrapInner("<span class='has-cursor'>");
    return this;
  };

  TextOutput.prototype.bindEvents = function() {
    this.$el.on("click", (function(_this) {
      return function() {
        return _this.focus(true);
      };
    })(this));
    this.toggler.on("click", (function(_this) {
      return function() {
        return _this.toggleOutputType();
      };
    })(this));
    return this;
  };

  return TextOutput;

})();

App.buildIOpair = function(outputSettings, inputSettings, bindEvents) {
  var input, output;
  output = new TextOutput(outputSettings);
  input = new TextInput(inputSettings);
  output.input = input;
  input.output = output;
  if (bindEvents) {
    output.bindEvents();
    input.bindEvents();
  }
  return [output, input];
};

$(function() {
  var inSet, outSet, _ref;
  outSet = {
    $el: $(".text-output")
  };
  inSet = {
    $el: $(".text-input")
  };
  return _ref = App.buildIOpair(outSet, inSet, true), App.mainOutput = _ref[0], App.mainInput = _ref[1], _ref;
});
